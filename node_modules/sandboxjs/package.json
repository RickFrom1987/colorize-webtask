{
  "_args": [
    [
      {
        "raw": "sandboxjs@^3.4.2",
        "scope": null,
        "escapedName": "sandboxjs",
        "name": "sandboxjs",
        "rawSpec": "^3.4.2",
        "spec": ">=3.4.2 <4.0.0",
        "type": "range"
      },
      "/Users/rickchen/webtask/node_modules/wt-cli"
    ]
  ],
  "_from": "sandboxjs@>=3.4.2 <4.0.0",
  "_id": "sandboxjs@3.4.2",
  "_inCache": true,
  "_location": "/sandboxjs",
  "_nodeVersion": "4.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/sandboxjs-3.4.2.tgz_1489683651336_0.2271484057419002"
  },
  "_npmUser": {
    "name": "filearts",
    "email": "filearts@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sandboxjs@^3.4.2",
    "scope": null,
    "escapedName": "sandboxjs",
    "name": "sandboxjs",
    "rawSpec": "^3.4.2",
    "spec": ">=3.4.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/wt-cli"
  ],
  "_resolved": "http://registry.npmjs.org/sandboxjs/-/sandboxjs-3.4.2.tgz",
  "_shasum": "83a15c74d9dfe39fc45e40fa5f7b804c15cc6c1a",
  "_shrinkwrap": null,
  "_spec": "sandboxjs@^3.4.2",
  "_where": "/Users/rickchen/webtask/node_modules/wt-cli",
  "author": {
    "name": "Auth0"
  },
  "bugs": {
    "url": "https://github.com/auth0/sandboxjs/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.34",
    "jwt-decode": "^1.4.0",
    "lodash.assign": "^3.2.0",
    "lodash.defaults": "^3.1.2",
    "lodash.defaultsdeep": "^3.10.0",
    "lodash.foreach": "^3.0.3",
    "lodash.get": "^3.7.0",
    "randexp": "^0.4.0",
    "superagent": "^1.4.0",
    "webtask-log-stream": "^2.0.1"
  },
  "description": "Sandbox node.js code",
  "devDependencies": {
    "code": "^1.5.0",
    "dotenv": "^1.2.0",
    "jsdoc-to-markdown": "^1.2.0",
    "jsonwebtoken": "^7.3.0",
    "lab": "^5.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "83a15c74d9dfe39fc45e40fa5f7b804c15cc6c1a",
    "tarball": "https://registry.npmjs.org/sandboxjs/-/sandboxjs-3.4.2.tgz"
  },
  "gitHead": "8a90bb8972284ecc6f5aa66cc5c6d127495e09ff",
  "homepage": "https://github.com/auth0/sandboxjs",
  "keywords": [
    "sandbox",
    "node",
    "js",
    "untrusted",
    "docker"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "auth0",
      "email": "support@auth0.com"
    },
    {
      "name": "filearts",
      "email": "filearts@gmail.com"
    },
    {
      "name": "jcenturion",
      "email": "centurion.javier@gmail.com"
    },
    {
      "name": "tjanczuk",
      "email": "tomasz@janczuk.org"
    },
    {
      "name": "woloski",
      "email": "matiasw@gmail.com"
    }
  ],
  "name": "sandboxjs",
  "optionalDependencies": {},
  "readme": "# sandboxjs\n\nSandbox node.js code like a boss.\n\n## Key Features\n\n* Runs code on the public [webtask.io](https://webtask.io) cluster.\n* Your code is totally sandboxed from everyone else's.\n* Integrated with your [wt-cli](https://npmjs.org/package/wt-cli) profiles.\n* Supports returning Promises and/or invoking node-style callbacks.\n\n## Installing it\n\n```bash\nnpm install sandboxjs\n\n# Optionally configure a default wt-cli profile\n```\n\n## Using it\n\n**First, get a webtask token using [wt-cli](https://npmjs.org/package/wt-cli):**\n\n```bash\n# Create a new wt-cli profile\nnpm install -g wt-cli\nwt init\n\n# Or, if you already use wt-cli:\nwt profile ls\n```\n\n```js\nvar Assert = require('assert');\nvar Sandbox = require('sandboxjs');\n\n// You can get your webtask token using the steps above\nvar code = 'module.exports = function (ctx, cb) { cb(null, \"hello world\"); }';\nvar profile = Sandbox.fromToken(process.env.WEBTASK_TOKEN);\n\n// This library lets you create a webtask and run it in one step as a shortcut:\nprofile.run(code, function (err, res, body) {\n    Assert.ifError(err);\n    Assert.equal(res.statusCode, 200, 'The webtask executed as expected');\n    Assert.equal(body, 'hello world', 'The webtask returned the expected string');\n});\n\n// Alternatively, your application might want to to create a webtask url\n// with your (or your users') custom code and secrets.\nprofile.create(code, { secrets: { auth0: 'rocks' } }, function (err, webtask) {\n    Assert.ifError(err);\n    \n    // Making requests to this url will run the specified custom code in a\n    // node.js sandbox and will give it access to your secrets in the first\n    // argument (`ctx`) of your exported webtask function.\n    // For more information on the different styles of webtask functions that\n    // are supported, see: https://webtask.io/docs/model\n    console.log(webtask.url);\n});\n```\n\n### Examples\n\n**Update the code of an existing named webtask**\n\n```js\nvar Sandbox = require('sandboxjs');\n\nvar sandbox = Sandbox.init({ /* ... */ });\nvar webtaskName = 'my_webtask';\nvar webtaskCode = 'module.exports = ...';\n\nsandbox.inspectWebtask({\n    name: webtaskName,\n    // We need to decrypt embedded secrets so that we can set them on the\n    // replacement named webtask\n    decrypt: true,\n    // No need to fetch code since we will be updating it anyway\n    fetch_code: false,\n}).then(handleClaims);\n\nfunction handleClaims(claims) {\n    // We will pull any claims from the existing webtask that are user-defined\n    // and set them on a new claims object. Note that some claims are *NOT*\n    // copied over because they are read-only claims generated by the platform.\n    // Common examples include: `ca`, `jti` and `iat`.\n    var newClaims = {\n        jtn: webtaskName,\n        dd: claims.dd,\n        mb: claims.mb,\n        pb: claims.pb,\n        // Instead of being an opaque, encrypted blob, this will be a javascript\n        // Object mapping secret key to value because we set the `decrypt`\n        // option on the call to `inspectWebtask`.\n        ectx: claims.ectx,\n        pctx: claims.pctx,\n        code: webtaskCode,\n    };\n    \n    // Create a replacement webtask from raw claims. We use `createRaw` instead\n    // of `create` so that we can deal directly with the platform's claims\n    // instead of the more human-friendly aliases in `create`.\n    // This method will make a token issue request with the updated claims\n    // and resolve the Promise with a new `Webtask` instance based on that\n    // token.\n    return sandbox.createRaw(newClaims);\n}\n```\n\n## API\n\n## Modules\n\n<dl>\n<dt><a href=\"#module_sandboxjs\">sandboxjs</a></dt>\n<dd><p>Sandbox node.js code.</p>\n</dd>\n</dl>\n\n## Classes\n\n<dl>\n<dt><a href=\"#CronJob\">CronJob</a></dt>\n<dd></dd>\n<dt><a href=\"#Webtask\">Webtask</a></dt>\n<dd></dd>\n</dl>\n\n<a name=\"module_sandboxjs\"></a>\n## sandboxjs\nSandbox node.js code.\n\n\n* [sandboxjs](#module_sandboxjs)\n    * _static_\n        * [.fromToken(token, options)](#module_sandboxjs.fromToken) ⇒ <code>Sandbox</code>\n        * [.init(options)](#module_sandboxjs.init) ⇒ <code>Sandbox</code>\n    * _inner_\n        * [~Sandbox](#module_sandboxjs..Sandbox)\n            * [new Sandbox(options)](#new_module_sandboxjs..Sandbox_new)\n            * [.create([codeOrUrl], [options], [cb])](#module_sandboxjs..Sandbox+create) ⇒ <code>Promise</code>\n            * [.createRaw(claims, [cb])](#module_sandboxjs..Sandbox+createRaw) ⇒ <code>Promise</code>\n            * [.createUrl(options, [cb])](#module_sandboxjs..Sandbox+createUrl) ⇒ <code>Promise</code>\n            * [.run([codeOrUrl], [options], [cb])](#module_sandboxjs..Sandbox+run) ⇒ <code>Promise</code>\n            * [.createToken(options, [cb])](#module_sandboxjs..Sandbox+createToken) ⇒ <code>Promise</code>\n            * [.createTokenRaw(claims, [options], [cb])](#module_sandboxjs..Sandbox+createTokenRaw) ⇒ <code>Promise</code>\n            * [.createLogStream(options)](#module_sandboxjs..Sandbox+createLogStream) ⇒ <code>Stream</code>\n            * [.getWebtask(options, [cb])](#module_sandboxjs..Sandbox+getWebtask) ⇒ <code>Promise</code>\n            * [.removeWebtask(options, [cb])](#module_sandboxjs..Sandbox+removeWebtask) ⇒ <code>Promise</code>\n            * [.updateWebtask(options, [cb])](#module_sandboxjs..Sandbox+updateWebtask) ⇒ <code>Promise</code>\n            * [.listWebtasks(options, [cb])](#module_sandboxjs..Sandbox+listWebtasks) ⇒ <code>Promise</code>\n            * [.createCronJob(options, [cb])](#module_sandboxjs..Sandbox+createCronJob) ⇒ <code>Promise</code>\n            * [.removeCronJob(options, [cb])](#module_sandboxjs..Sandbox+removeCronJob) ⇒ <code>Promise</code>\n            * [.setCronJobState(options, [cb])](#module_sandboxjs..Sandbox+setCronJobState) ⇒ <code>Promise</code>\n            * [.listCronJobs([options], [cb])](#module_sandboxjs..Sandbox+listCronJobs) ⇒ <code>Promise</code>\n            * [.getCronJob(options, [cb])](#module_sandboxjs..Sandbox+getCronJob) ⇒ <code>Promise</code>\n            * [.getCronJobHistory(options, [cb])](#module_sandboxjs..Sandbox+getCronJobHistory) ⇒ <code>Promise</code>\n            * [.inspectToken(options, [cb])](#module_sandboxjs..Sandbox+inspectToken) ⇒ <code>Promise</code>\n            * [.inspectWebtask(options, [cb])](#module_sandboxjs..Sandbox+inspectWebtask) ⇒ <code>Promise</code>\n            * [.revokeToken(token, [cb])](#module_sandboxjs..Sandbox+revokeToken) ⇒ <code>Promise</code>\n            * [.listNodeModuleVersions(options, [cb])](#module_sandboxjs..Sandbox+listNodeModuleVersions) ⇒ <code>Promise</code>\n            * [.ensureNodeModules(options, [cb])](#module_sandboxjs..Sandbox+ensureNodeModules) ⇒ <code>Promise</code>\n            * [.updateStorage(options, storage, [cb])](#module_sandboxjs..Sandbox+updateStorage) ⇒ <code>Promise</code>\n            * [.getStorage(options, [cb])](#module_sandboxjs..Sandbox+getStorage) ⇒ <code>Promise</code>\n\n<a name=\"module_sandboxjs.fromToken\"></a>\n### Sandbox.fromToken(token, options) ⇒ <code>Sandbox</code>\nCreate a Sandbox instance from a webtask token\n\n**Kind**: static method of <code>[sandboxjs](#module_sandboxjs)</code>  \n**Returns**: <code>Sandbox</code> - A {@see Sandbox} instance whose url, token and container were derived from the given webtask token.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | The webtask token from which the Sandbox profile will be derived. |\n| options | <code>Object</code> | The options for creating the Sandbox instance that override the derived values from the token. |\n| [options.url] | <code>String</code> | The url of the webtask cluster. Defaults to the public 'webtask.it.auth0.com' cluster. |\n| options.container | <code>String</code> | The container with which this Sandbox instance should be associated. Note that your Webtask token must give you access to that container or all operations will fail. |\n| options.token | <code>String</code> | The Webtask Token. See: https://webtask.io/docs/api_issue. |\n\n<a name=\"module_sandboxjs.init\"></a>\n### Sandbox.init(options) ⇒ <code>Sandbox</code>\nCreate a Sandbox instance\n\n**Kind**: static method of <code>[sandboxjs](#module_sandboxjs)</code>  \n**Returns**: <code>Sandbox</code> - A {@see Sandbox} instance.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | The options for creating the Sandbox instance. |\n| [options.url] | <code>String</code> | The url of the webtask cluster. Defaults to the public 'webtask.it.auth0.com' cluster. |\n| options.container | <code>String</code> | The container with which this Sandbox instance should be associated. Note that your Webtask token must give you access to that container or all operations will fail. |\n| options.token | <code>String</code> | The Webtask Token. See: https://webtask.io/docs/api_issue. |\n\n<a name=\"module_sandboxjs..Sandbox\"></a>\n### Sandbox~Sandbox\n**Kind**: inner class of <code>[sandboxjs](#module_sandboxjs)</code>  \n\n* [~Sandbox](#module_sandboxjs..Sandbox)\n    * [new Sandbox(options)](#new_module_sandboxjs..Sandbox_new)\n    * [.create([codeOrUrl], [options], [cb])](#module_sandboxjs..Sandbox+create) ⇒ <code>Promise</code>\n    * [.createRaw(claims, [cb])](#module_sandboxjs..Sandbox+createRaw) ⇒ <code>Promise</code>\n    * [.createUrl(options, [cb])](#module_sandboxjs..Sandbox+createUrl) ⇒ <code>Promise</code>\n    * [.run([codeOrUrl], [options], [cb])](#module_sandboxjs..Sandbox+run) ⇒ <code>Promise</code>\n    * [.createToken(options, [cb])](#module_sandboxjs..Sandbox+createToken) ⇒ <code>Promise</code>\n    * [.createTokenRaw(claims, [options], [cb])](#module_sandboxjs..Sandbox+createTokenRaw) ⇒ <code>Promise</code>\n    * [.createLogStream(options)](#module_sandboxjs..Sandbox+createLogStream) ⇒ <code>Stream</code>\n    * [.getWebtask(options, [cb])](#module_sandboxjs..Sandbox+getWebtask) ⇒ <code>Promise</code>\n    * [.removeWebtask(options, [cb])](#module_sandboxjs..Sandbox+removeWebtask) ⇒ <code>Promise</code>\n    * [.updateWebtask(options, [cb])](#module_sandboxjs..Sandbox+updateWebtask) ⇒ <code>Promise</code>\n    * [.listWebtasks(options, [cb])](#module_sandboxjs..Sandbox+listWebtasks) ⇒ <code>Promise</code>\n    * [.createCronJob(options, [cb])](#module_sandboxjs..Sandbox+createCronJob) ⇒ <code>Promise</code>\n    * [.removeCronJob(options, [cb])](#module_sandboxjs..Sandbox+removeCronJob) ⇒ <code>Promise</code>\n    * [.setCronJobState(options, [cb])](#module_sandboxjs..Sandbox+setCronJobState) ⇒ <code>Promise</code>\n    * [.listCronJobs([options], [cb])](#module_sandboxjs..Sandbox+listCronJobs) ⇒ <code>Promise</code>\n    * [.getCronJob(options, [cb])](#module_sandboxjs..Sandbox+getCronJob) ⇒ <code>Promise</code>\n    * [.getCronJobHistory(options, [cb])](#module_sandboxjs..Sandbox+getCronJobHistory) ⇒ <code>Promise</code>\n    * [.inspectToken(options, [cb])](#module_sandboxjs..Sandbox+inspectToken) ⇒ <code>Promise</code>\n    * [.inspectWebtask(options, [cb])](#module_sandboxjs..Sandbox+inspectWebtask) ⇒ <code>Promise</code>\n    * [.revokeToken(token, [cb])](#module_sandboxjs..Sandbox+revokeToken) ⇒ <code>Promise</code>\n    * [.listNodeModuleVersions(options, [cb])](#module_sandboxjs..Sandbox+listNodeModuleVersions) ⇒ <code>Promise</code>\n    * [.ensureNodeModules(options, [cb])](#module_sandboxjs..Sandbox+ensureNodeModules) ⇒ <code>Promise</code>\n    * [.updateStorage(options, storage, [cb])](#module_sandboxjs..Sandbox+updateStorage) ⇒ <code>Promise</code>\n    * [.getStorage(options, [cb])](#module_sandboxjs..Sandbox+getStorage) ⇒ <code>Promise</code>\n\n<a name=\"new_module_sandboxjs..Sandbox_new\"></a>\n#### new Sandbox(options)\nCreates an object representing a user's webtask.io credentials\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options used to configure the profile |\n| options.url | <code>String</code> | The url of the webtask cluster where code will run |\n| options.container | <code>String</code> | The name of the container in which code will run |\n| options.token | <code>String</code> | The JWT (see: http://jwt.io) issued by webtask.io that grants rights to run code in the indicated container |\n\n<a name=\"module_sandboxjs..Sandbox+create\"></a>\n#### sandbox.create([codeOrUrl], [options], [cb]) ⇒ <code>Promise</code>\nCreate a Webtask from the given options\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [codeOrUrl] | <code>String</code> | The code for the webtask or a url starting with http:// or https:// |\n| [options] | <code>Object</code> | Options for creating the webtask |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+createRaw\"></a>\n#### sandbox.createRaw(claims, [cb]) ⇒ <code>Promise</code>\nCreate a Webtask from the given claims\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| claims | <code>Object</code> | Options for creating the webtask |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+createUrl\"></a>\n#### sandbox.createUrl(options, [cb]) ⇒ <code>Promise</code>\nShortcut to create a Webtask and get its url from the given options\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for creating the webtask |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+run\"></a>\n#### sandbox.run([codeOrUrl], [options], [cb]) ⇒ <code>Promise</code>\nShortcut to create and run a Webtask from the given options\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [codeOrUrl] | <code>String</code> | The code for the webtask or a url starting with http:// or https:// |\n| [options] | <code>Object</code> | Options for creating the webtask |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+createToken\"></a>\n#### sandbox.createToken(options, [cb]) ⇒ <code>Promise</code>\nCreate a webtask token - A JWT (see: http://jwt.io) with the supplied options\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Claims to make for this token (see: https://webtask.io/docs/api_issue) |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+createTokenRaw\"></a>\n#### sandbox.createTokenRaw(claims, [options], [cb]) ⇒ <code>Promise</code>\nCreate a webtask token - A JWT (see: http://jwt.io) with the supplied claims\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| claims | <code>Object</code> | Claims to make for this token (see: https://webtask.io/docs/api_issue) |\n| [options] | <code>Object</code> | Optional options. Currently only options.include_webtask_url is supported. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+createLogStream\"></a>\n#### sandbox.createLogStream(options) ⇒ <code>Stream</code>\nCreate a stream of logs from the webtask container\n\nNote that the logs will include messages from our infrastructure.\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Stream</code> - A stream that will emit 'data' events with container logs  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Streaming options overrides |\n| [options.container] | <code>String</code> | The container for which you would like to stream logs. Defaults to the current profile's container. |\n\n<a name=\"module_sandboxjs..Sandbox+getWebtask\"></a>\n#### sandbox.getWebtask(options, [cb]) ⇒ <code>Promise</code>\nRead a named webtask\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+removeWebtask\"></a>\n#### sandbox.removeWebtask(options, [cb]) ⇒ <code>Promise</code>\nRemove a named webtask from the webtask container\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+updateWebtask\"></a>\n#### sandbox.updateWebtask(options, [cb]) ⇒ <code>Promise</code>\nUpdate an existing webtask's code, secrets or other claims\n\nNote that this method should be used with caution as there is the potential\nfor a race condition where another agent updates the webtask between the time\nthat the webtask details and claims are resolved and when the webtask\nupdate is issued.\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an instance of Webtask representing the updated webtask  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| options.name | <code>String</code> | Name of the webtask to update |\n| [options.code] | <code>String</code> | Updated code for the webtask |\n| [options.url] | <code>String</code> | Updated code URL for the webtask |\n| [options.secrets] | <code>String</code> | If `false`, remove existing secrets, if an object update secrets, otherwise preserve |\n| [options.params] | <code>String</code> | If `false`, remove existing params, if an object update params, otherwise preserve |\n| [options.host] | <code>String</code> | If `false`, remove existing host, if a string update host, otherwise preserve |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+listWebtasks\"></a>\n#### sandbox.listWebtasks(options, [cb]) ⇒ <code>Promise</code>\nList named webtasks from the webtask container\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+createCronJob\"></a>\n#### sandbox.createCronJob(options, [cb]) ⇒ <code>Promise</code>\nCreate a cron job from an already-existing webtask token\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with a {@see CronJob} instance.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for creating a cron job |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| options.token | <code>String</code> | The webtask token that will be used to run the job. |\n| options.schedule | <code>String</code> | The cron schedule that will be used to determine when the job will be run. |\n| options.meta | <code>String</code> | The cron metadata (set of string key value pairs). |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+removeCronJob\"></a>\n#### sandbox.removeCronJob(options, [cb]) ⇒ <code>Promise</code>\nRemove an existing cron job\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the response from removing the job.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for removing the cron job |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+setCronJobState\"></a>\n#### sandbox.setCronJobState(options, [cb]) ⇒ <code>Promise</code>\nSet an existing cron job's state\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the response from removing the job.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for updating the cron job's state |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| options.state | <code>String</code> | The new state of the cron job. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+listCronJobs\"></a>\n#### sandbox.listCronJobs([options], [cb]) ⇒ <code>Promise</code>\nList cron jobs associated with this profile\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an Array of {@see CronJob} instances.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>Object</code> | Options for listing cron jobs. |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+getCronJob\"></a>\n#### sandbox.getCronJob(options, [cb]) ⇒ <code>Promise</code>\nGet a CronJob instance associated with an existing cron job\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with a {@see CronJob} instance.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for retrieving the cron job. |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+getCronJobHistory\"></a>\n#### sandbox.getCronJobHistory(options, [cb]) ⇒ <code>Promise</code>\nGet the historical results of executions of an existing cron job.\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an Array of cron job results.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for retrieving the cron job. |\n| [options.container] | <code>String</code> | The container in which the job will run. Defaults to the current profile's container. |\n| options.name | <code>String</code> | The name of the cron job. |\n| [options.offset] | <code>String</code> | The offset to use when paging through results. |\n| [options.limit] | <code>String</code> | The limit to use when paging through results. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+inspectToken\"></a>\n#### sandbox.inspectToken(options, [cb]) ⇒ <code>Promise</code>\nInspect an existing webtask token to resolve code and/or secrets\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the resolved webtask data.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for inspecting the webtask. |\n| options.token | <code>Boolean</code> | The token that you would like to inspect. |\n| [options.decrypt] | <code>Boolean</code> | Decrypt the webtask's secrets. |\n| [options.fetch_code] | <code>Boolean</code> | Fetch the code associated with the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+inspectWebtask\"></a>\n#### sandbox.inspectWebtask(options, [cb]) ⇒ <code>Promise</code>\nInspect an existing named webtask to resolve code and/or secrets\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the resolved webtask data.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for inspecting the webtask. |\n| options.name | <code>Boolean</code> | The named webtask that you would like to inspect. |\n| [options.decrypt] | <code>Boolean</code> | Decrypt the webtask's secrets. |\n| [options.fetch_code] | <code>Boolean</code> | Fetch the code associated with the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+revokeToken\"></a>\n#### sandbox.revokeToken(token, [cb]) ⇒ <code>Promise</code>\nRevoke a webtask token\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n**See**: https://webtask.io/docs/api_revoke  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | The token that should be revoked |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+listNodeModuleVersions\"></a>\n#### sandbox.listNodeModuleVersions(options, [cb]) ⇒ <code>Promise</code>\nList versions of a given node module that are available on the platform\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| options.name | <code>String</code> | Name of the node module |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+ensureNodeModules\"></a>\n#### sandbox.ensureNodeModules(options, [cb]) ⇒ <code>Promise</code>\nEnsure that a set of modules are available on the platform\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of { name, version, state } objects  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| options.modules | <code>Array</code> | Array of { name, version } pairs |\n| options.reset | <code>Boolean</code> | Trigger a rebuild of the modules (Requires administrative token) |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"module_sandboxjs..Sandbox+updateStorage\"></a>\n#### sandbox.updateStorage(options, storage, [cb]) ⇒ <code>Promise</code>\nUpdate the storage associated to the a webtask\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the webtask. |\n| storage | <code>Object</code> | storage |\n| storage.data | <code>Object</code> | The data to be stored |\n| storage.etag | <code>String</code> | Pass in an optional string to be used for optimistic concurrency control to prevent simultaneous updates of the same data. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"module_sandboxjs..Sandbox+getStorage\"></a>\n#### sandbox.getStorage(options, [cb]) ⇒ <code>Promise</code>\nRead the storage associated to the a webtask\n\n**Kind**: instance method of <code>[Sandbox](#module_sandboxjs..Sandbox)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"CronJob\"></a>\n## CronJob\n**Kind**: global class  \n\n* [CronJob](#CronJob)\n    * [new CronJob()](#new_CronJob_new)\n    * [.claims](#CronJob+claims)\n    * [.sandbox](#CronJob+sandbox)\n    * [.refresh([cb])](#CronJob+refresh) ⇒ <code>Promise</code>\n    * [.remove([cb])](#CronJob+remove) ⇒ <code>Promise</code>\n    * [.getHistory(options, [cb])](#CronJob+getHistory) ⇒ <code>Promise</code>\n    * [.inspect(options, [cb])](#CronJob+inspect) ⇒ <code>Promise</code>\n    * [.setJobState(options, [cb])](#CronJob+setJobState) ⇒ <code>Promise</code>\n\n<a name=\"new_CronJob_new\"></a>\n### new CronJob()\nCreates an object representing a CronJob\n\n<a name=\"CronJob+claims\"></a>\n### cronJob.claims\n**Kind**: instance property of <code>[CronJob](#CronJob)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| claims | The claims embedded in the Webtask's token |\n\n<a name=\"CronJob+sandbox\"></a>\n### cronJob.sandbox\n**Kind**: instance property of <code>[CronJob](#CronJob)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| sandbox | The {@see Sandbox} instance used to create this Webtask instance |\n\n<a name=\"CronJob+refresh\"></a>\n### cronJob.refresh([cb]) ⇒ <code>Promise</code>\nRefresh this job's metadata\n\n**Kind**: instance method of <code>[CronJob](#CronJob)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the this cron job instance  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"CronJob+remove\"></a>\n### cronJob.remove([cb]) ⇒ <code>Promise</code>\nRemove this cron job from the webtask cluster\n\nNote that this will not revoke the underlying webtask token, so the underlying webtask will remain functional.\n\n**Kind**: instance method of <code>[CronJob](#CronJob)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the token  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks |\n\n<a name=\"CronJob+getHistory\"></a>\n### cronJob.getHistory(options, [cb]) ⇒ <code>Promise</code>\nGet the history of this cron job\n\n**Kind**: instance method of <code>[CronJob](#CronJob)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an Array of cron job results.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for retrieving the cron job. |\n| [options.offset] | <code>String</code> | The offset to use when paging through results. |\n| [options.limit] | <code>String</code> | The limit to use when paging through results. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"CronJob+inspect\"></a>\n### cronJob.inspect(options, [cb]) ⇒ <code>Promise</code>\nInspect an existing webtask to optionally get code and/or secrets\n\n**Kind**: instance method of <code>[CronJob](#CronJob)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an Array of cron job results.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for inspecting the webtask. |\n| [options.fetch_code] | <code>Boolean</code> | Fetch the code associated with the webtask. |\n| [options.decrypt] | <code>Boolean</code> | Decrypt the webtask's secrets. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"CronJob+setJobState\"></a>\n### cronJob.setJobState(options, [cb]) ⇒ <code>Promise</code>\nSet the cron job's state\n\n**Kind**: instance method of <code>[CronJob](#CronJob)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an Array of cron job results.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for updating the webtask. |\n| options.state | <code>Boolean</code> | Set the cron job's state to this. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask\"></a>\n## Webtask\n**Kind**: global class  \n\n* [Webtask](#Webtask)\n    * [new Webtask()](#new_Webtask_new)\n    * [.claims](#Webtask+claims)\n    * [.sandbox](#Webtask+sandbox)\n    * [.token](#Webtask+token)\n    * [.meta](#Webtask+meta)\n    * [.createLogStream(options)](#Webtask+createLogStream) ⇒ <code>Stream</code>\n    * [.run(options, [cb])](#Webtask+run) ⇒ <code>Promise</code>\n    * [.createCronJob(options, [cb])](#Webtask+createCronJob) ⇒ <code>Promise</code>\n    * [.inspect(options, [cb])](#Webtask+inspect) ⇒ <code>Promise</code>\n    * [.remove([cb])](#Webtask+remove) ⇒ <code>Promise</code>\n    * [.revoke([cb])](#Webtask+revoke) ⇒ <code>Promise</code>\n    * [.update([options], [cb])](#Webtask+update) ⇒ <code>Promise</code>\n    * [.updateStorage(options, storage, [cb])](#Webtask+updateStorage) ⇒ <code>Promise</code>\n    * [.getStorage(options, [cb])](#Webtask+getStorage) ⇒ <code>Promise</code>\n\n<a name=\"new_Webtask_new\"></a>\n### new Webtask()\nCreates an object representing a Webtask\n\n<a name=\"Webtask+claims\"></a>\n### webtask.claims\n**Kind**: instance property of <code>[Webtask](#Webtask)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| claims | The claims embedded in the Webtask's token |\n\n<a name=\"Webtask+sandbox\"></a>\n### webtask.sandbox\n**Kind**: instance property of <code>[Webtask](#Webtask)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| sandbox | The {@see Sandbox} instance used to create this Webtask instance |\n\n<a name=\"Webtask+token\"></a>\n### webtask.token\n**Kind**: instance property of <code>[Webtask](#Webtask)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| token | The token associated with this webtask |\n\n<a name=\"Webtask+meta\"></a>\n### webtask.meta\n**Kind**: instance property of <code>[Webtask](#Webtask)</code>  \n**Properties**\n\n| Name | Description |\n| --- | --- |\n| meta | The metadata associated with this webtask |\n\n<a name=\"Webtask+createLogStream\"></a>\n### webtask.createLogStream(options) ⇒ <code>Stream</code>\nCreate a stream of logs from the webtask container\n\nNote that the logs will include messages from our infrastructure.\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Stream</code> - A stream that will emit 'data' events with container logs  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Streaming options overrides |\n| [options.container] | <code>String</code> | The container for which you would like to stream logs. Defaults to the current profile's container. |\n\n<a name=\"Webtask+run\"></a>\n### webtask.run(options, [cb]) ⇒ <code>Promise</code>\nRun the webtask and return the result of execution\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - - A Promise that will be resolved with the response from the server.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options used to tweak how the webtask will be invoked |\n| [cb] | <code>function</code> | Optional node-style callback that will be invoked upon completion |\n\n<a name=\"Webtask+createCronJob\"></a>\n### webtask.createCronJob(options, [cb]) ⇒ <code>Promise</code>\nSchedule the webtask to run periodically\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - - A Promise that will be resolved with a {@see CronJob} instance.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for creating the webtask |\n| options.schedule | <code>Object</code> | Cron-string-formatted schedule |\n| [options.name] | <code>Object</code> | The name for the cron job |\n| [cb] | <code>function</code> | Optional node-style callback that will be invoked upon completion |\n\n<a name=\"Webtask+inspect\"></a>\n### webtask.inspect(options, [cb]) ⇒ <code>Promise</code>\nInspect an existing webtask to optionally get code and/or secrets\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the result of inspecting the token.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options for inspecting the webtask. |\n| [options.decrypt] | <code>Boolean</code> | Decrypt the webtask's secrets. |\n| [options.fetch_code] | <code>Boolean</code> | Fetch the code associated with the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask+remove\"></a>\n### webtask.remove([cb]) ⇒ <code>Promise</code>\nRemove the named webtask\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the result of inspecting the token.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask+revoke\"></a>\n### webtask.revoke([cb]) ⇒ <code>Promise</code>\nRevoke the webtask's token\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the result of revoking the token.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask+update\"></a>\n### webtask.update([options], [cb]) ⇒ <code>Promise</code>\nUpdate a webtask\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with the result of revoking the token.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>Object</code> | Options for updating a webtask (@see: Sandbox.updateWebtask) |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask+updateStorage\"></a>\n### webtask.updateStorage(options, storage, [cb]) ⇒ <code>Promise</code>\nUpdate the storage associated to the a webtask\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the webtask. |\n| storage | <code>Object</code> | storage |\n| storage.data | <code>Object</code> | The data to be stored |\n| storage.etag | <code>String</code> | Pass in an optional string to be used for optimistic concurrency control to prevent simultaneous updates of the same data. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n<a name=\"Webtask+getStorage\"></a>\n### webtask.getStorage(options, [cb]) ⇒ <code>Promise</code>\nRead the storage associated to the a webtask\n\n**Kind**: instance method of <code>[Webtask](#Webtask)</code>  \n**Returns**: <code>Promise</code> - A Promise that will be fulfilled with an array of Webtasks  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Options |\n| [options.container] | <code>String</code> | Set the webtask container. Defaults to the profile's container. |\n| options.name | <code>String</code> | The name of the webtask. |\n| [cb] | <code>function</code> | Optional callback function for node-style callbacks. |\n\n\n## Usages\n\nThis library will be used in [wt-cli](https://github.com/auth0/wt-cli).\n\n## Contributing\n\nJust clone the repo, run `npm install` and then hack away.\n\n## Issue reporting\n \nIf you have found a bug or if you have a feature request, please report them at\nthis repository issues section. Please do not report security vulnerabilities on\nthe public GitHub issue tracker. The \n[Responsible Disclosure Program](https://auth0.com/whitehat) details the \nprocedure for disclosing security issues.\n\n## License\n \nMIT\n\n## What is Auth0?\n \nAuth0 helps you to:\n\n* Add authentication with [multiple authentication sources](https://docs.auth0.com/identityproviders), either social like **Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, Salesforce, amont others**, or enterprise identity systems like **Windows Azure AD, Google Apps, Active Directory, ADFS or any SAML Identity Provider**.\n* Add authentication through more traditional **[username/password databases](https://docs.auth0.com/mysql-connection-tutorial)**.\n* Add support for **[linking different user accounts](https://docs.auth0.com/link-accounts)** with the same user.\n* Support for generating signed [Json Web Tokens](https://docs.auth0.com/jwt) to call your APIs and **flow the user identity** securely.\n* Analytics of how, when and where users are logging in.\n* Pull data from other sources and add it to the user profile, through [JavaScript rules](https://docs.auth0.com/rules).\n\n## Create a free account in Auth0\n \n1. Go to [Auth0](https://auth0.com) and click Sign Up.\n2. Use Google, GitHub or Microsoft Account to login.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/auth0/sandboxjs.git"
  },
  "scripts": {
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "preversion": "npm run docs",
    "test": "lab -v"
  },
  "version": "3.4.2"
}
